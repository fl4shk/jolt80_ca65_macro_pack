.ifndef instruction_constants_spinc
instruction_constants_spinc = 3


; .include "general_macros.spinc"
.include "cpu_constants.spinc"


; Instruction constants

; Most instructions, except for group 6, are 16 bits long
instr_main_width = 16
instr_main_msb_pos = width_to_msb_pos(instr_main_width)

; Instruction decoder constants

; There are six instruction groups (counting instr_grp_unknown), so use a
; 3-bit enum
instr_grp_width = 3
instr_grp_msb_pos = width_to_msb_pos(instr_grp_width)




; Instruction Group 1 constants
; Encoding:  0ooo aaaa iiii iiii
; instr_g1_id = 0b0
instr_g1_id = $0
instr_g1_id_pos = 15

; Instruction group 1 has 3 opcode bits
instr_g1_op_width = 3
instr_g1_op_msb_pos = width_to_msb_pos(instr_g1_op_width)
instr_g1_op_range_hi = 14
instr_g1_op_range_lo = instr_g1_op_range_hi - instr_g1_op_msb_pos

; Instruction group 1 has a 4-bit index for rA
instr_g1_ra_index_width = cpu_reg_index_ie_width
instr_g1_ra_index_msb_pos = cpu_reg_index_ie_msb_pos
instr_g1_ra_index_range_hi = width_to_msb_pos(instr_g1_op_range_lo)
instr_g1_ra_index_range_lo = instr_g1_ra_index_range_hi - instr_g1_ra_index_msb_pos

; Instruction group 1 has an 8-bit immediate value
instr_g1_imm_value_width = cpu_imm_value_8_width
instr_g1_imm_value_msb_pos = cpu_imm_value_8_msb_pos
instr_g1_imm_value_range_hi = width_to_msb_pos(instr_g1_ra_index_range_lo)
instr_g1_imm_value_range_lo = instr_g1_imm_value_range_hi - instr_g1_imm_value_msb_pos




; Instruction Group 2 constants
; Encoding:  10oo oooo aaaa bbbb
;instr_g2_id = 0b10
instr_g2_id = $2
instr_g2_id_range_hi = 15
instr_g2_id_range_lo = 14

; Instruction group 2 has 6 opcode bits
instr_g2_op_width = 6
instr_g2_op_msb_pos = width_to_msb_pos(instr_g2_op_width)
instr_g2_op_range_hi = width_to_msb_pos(instr_g2_id_range_lo)
instr_g2_op_range_lo = instr_g2_op_range_hi - instr_g2_op_msb_pos

; Instruction group 2 has a 4-bit index for rA (or rAp)
instr_g2_ra_index_width = cpu_reg_index_ie_width
instr_g2_ra_index_msb_pos = cpu_reg_index_ie_msb_pos
instr_g2_ra_index_range_hi = width_to_msb_pos(instr_g2_op_range_lo)
instr_g2_ra_index_range_lo = instr_g2_ra_index_range_hi - instr_g2_ra_index_msb_pos

; Instruction group 2 has a 4-bit index for rB (or rBp)
instr_g2_rb_index_width = cpu_reg_index_ie_width
instr_g2_rb_index_msb_pos = cpu_reg_index_ie_msb_pos
instr_g2_rb_index_range_hi = width_to_msb_pos(instr_g2_ra_index_range_lo)
instr_g2_rb_index_range_lo = instr_g2_rb_index_range_hi - instr_g2_rb_index_msb_pos




; Instruction Group 3 constants
; Encoding:  1100 ooaa aabb bccc
;instr_g3_id = 0b1100
instr_g3_id = $c
instr_g3_id_range_hi = 15
instr_g3_id_range_lo = 12

; Instruction group 3 has 2 opcode bits
instr_g3_op_width = 2
instr_g3_op_msb_pos = width_to_msb_pos(instr_g3_op_width)
instr_g3_op_range_hi = width_to_msb_pos(instr_g3_id_range_lo)
instr_g3_op_range_lo = instr_g3_op_range_hi - instr_g3_op_msb_pos

; Instruction group 3 has a 4-bit index for rA
instr_g3_ra_index_width = cpu_reg_index_ie_width
instr_g3_ra_index_msb_pos = cpu_reg_index_ie_msb_pos
instr_g3_ra_index_range_hi = width_to_msb_pos(instr_g3_op_range_lo)
instr_g3_ra_index_range_lo = instr_g3_ra_index_range_hi - instr_g3_ra_index_msb_pos

; Instruction group 3 has a 3-bit index for rBp
instr_g3_rbp_index_width = cpu_rp_index_ie_width
instr_g3_rbp_index_msb_pos = cpu_rp_index_ie_msb_pos
instr_g3_rbp_index_range_hi = width_to_msb_pos(instr_g3_ra_index_range_lo)
instr_g3_rbp_index_range_lo = instr_g3_rbp_index_range_hi - instr_g3_rbp_index_msb_pos

; Instruction group 3 has a 3-bit index for rCp
instr_g3_rcp_index_width = cpu_rp_index_ie_width
instr_g3_rcp_index_msb_pos = cpu_rp_index_ie_msb_pos
instr_g3_rcp_index_range_hi = width_to_msb_pos(instr_g3_rbp_index_range_lo)
instr_g3_rcp_index_range_lo = instr_g3_rcp_index_range_hi - instr_g3_rcp_index_msb_pos



; Instruction Group 4 constants
; Encoding:  1101 oooo iiii iiii
;instr_g4_id = 0b1101
instr_g4_id = $d
instr_g4_id_range_hi = 15
instr_g4_id_range_lo = 12

; Instruction group 4 has 4 opcode bits
instr_g4_op_width = 4
instr_g4_op_msb_pos = width_to_msb_pos(instr_g4_op_width)
instr_g4_op_range_hi = width_to_msb_pos(instr_g4_id_range_lo)
instr_g4_op_range_lo = instr_g4_op_range_hi - instr_g4_op_msb_pos


; Instruction group 4 has an 8-bit immediate value
instr_g4_imm_value_width = cpu_imm_value_8_width
instr_g4_imm_value_msb_pos = cpu_imm_value_8_msb_pos
instr_g4_imm_value_range_hi = width_to_msb_pos(instr_g4_op_range_lo)
instr_g4_imm_value_range_lo = instr_g4_imm_value_range_hi - instr_g4_imm_value_msb_pos




; Instruction Group 5 constants
; Encoding:  1110 00oo oaaa abbb   iiii iiii jjjj jjjj
; "ihi" is short for "Instruction High", which is the high 16 bits of
; a 32-bit instruction
; "ilo" is short for "Instruction Low", which is the low 16 bits of a
; 32-bit instruction
; instr_g5_ihi_id = 0b111000
instr_g5_ihi_id = $38
instr_g5_ihi_id_range_hi = 15
instr_g5_ihi_id_range_lo = 10

; Instruction group 5 has 3 opcode bits
instr_g5_op_width = 3
instr_g5_op_msb_pos = width_to_msb_pos(instr_g5_op_width)
instr_g5_ihi_op_range_hi = width_to_msb_pos(instr_g5_ihi_id_range_lo)
instr_g5_ihi_op_range_lo = instr_g5_ihi_op_range_hi - instr_g5_op_msb_pos

; Instruction group 5 has a 4-bit index for rA
instr_g5_ihi_ra_index_width = cpu_reg_index_ie_width
instr_g5_ihi_ra_index_msb_pos = cpu_reg_index_ie_msb_pos
instr_g5_ihi_ra_index_range_hi = width_to_msb_pos(instr_g5_ihi_op_range_lo)
instr_g5_ihi_ra_index_range_lo = instr_g5_ihi_ra_index_range_hi - instr_g5_ihi_ra_index_msb_pos

; Instruction group 5 has a 3-bit index for rBp
instr_g5_ihi_rbp_index_width = cpu_rp_index_ie_width
instr_g5_ihi_rbp_index_msb_pos = cpu_rp_index_ie_msb_pos
instr_g5_ihi_rbp_index_range_hi = width_to_msb_pos(instr_g5_ihi_ra_index_range_lo)
instr_g5_ihi_rbp_index_range_lo = instr_g5_ihi_rbp_index_range_hi - instr_g5_ihi_rbp_index_msb_pos

; Instruction group 5 has a 16-bit immediate value
instr_g5_ilo_imm_value_width = cpu_imm_value_16_width
instr_g5_ilo_imm_value_msb_pos = cpu_imm_value_16_msb_pos
instr_g5_ilo_imm_value_range_hi = 15
instr_g5_ilo_imm_value_range_lo = instr_g5_ilo_imm_value_range_hi - instr_g5_ilo_imm_value_msb_pos




.endif		; instruction_constants_spinc
