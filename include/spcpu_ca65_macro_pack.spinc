.ifndef spcpu_ca65_macro_pack_spinc
spcpu_ca65_macro_pack_spinc = 3


.include "instruction_constants.spinc"
.include "instruction_enums.spinc"

; It's a good thing I encode branch offsets at the end of group 4
; instructions
.macro _branch_offset instr, target
	.local @distance, @next
	@distance = (target) - @next
	instr
	.assert @distance >= -128 && @distance <= 127, error, "branch out of range"
	.byte <@distance
@next:
.endmacro


;.macro _branch_offset instr, target
;	.local @distance, @next
;	@distance = (target) - @next - 2
;	instr
;	.assert @distance >= -128 && @distance <= 127, error, "branch out of range"
;	.byte <@distance
;@next:
;.endmacro

;.macro _branch_offset instr, target
;	.local @distance, @next
;@next:
;	@distance = (target) - @next
;	instr
;	.assert @distance >= -128 && @distance <= 127, error, "branch out of range"
;	.byte <@distance
;.endmacro

.macro error_if_bad_reg_name rA, instr
	.if .not ( .xmatch( rA, r0 ) \
		.or .xmatch( rA, r1 ) \
		.or .xmatch( rA, r2 ) \
		.or .xmatch( rA, r3 ) \
		.or .xmatch( rA, r4 ) \
		.or .xmatch( rA, r5 ) \
		.or .xmatch( rA, r6 ) \
		.or .xmatch( rA, r7 ) \
		.or .xmatch( rA, r8 ) \
		.or .xmatch( rA, r9 ) \
		.or .xmatch( rA, r10 ) \
		.or .xmatch( rA, r11 ) \
		.or .xmatch( rA, r12 ) \
		.or .xmatch( rA, r13 ) \
		.or .xmatch( rA, r14 ) \
		.or .xmatch( rA, r15 ) )
		.error .concat( "Invalid register for the ", .string(instr), \
			" instruction" )
	.endif
.endmac

.macro error_if_bad_reg_pair_name rAp, instr
	.if .not ( .xmatch( rAp, r0p ) \
		.or .xmatch( rAp, r2p ) \
		.or .xmatch( rAp, r4p ) \
		.or .xmatch( rAp, r6p ) \
		.or .xmatch( rAp, r8p ) \
		.or .xmatch( rAp, r10p ) \
		.or .xmatch( rAp, r12p ) \
		.or .xmatch( rAp, r14p ) \
		.or .xmatch( rAp, sp ) \
		.or .xmatch( rAp, lr ) \
		.or .xmatch( rAp, pc ) )
		.error .concat( "Invalid register pair for the ", \
			.string(instr), " instruction" )
	.endif
.endmac

.macro warn_if_reg_pair_is_sp rAp, instr
	.if ( .xmatch( rAp, r10p ) \
		.or .xmatch( rAp, sp ) )
		.warning .concat( "CAUTION CAUTION CAUTION!!  Use of sp in the ", \
			.string(instr), " instruction NEEDS CAUTION" )
	.endif
.endmac


;.macro error_if_too_large_imm_value_8 imm_value_8, instr
;	.if imm_value_8 >= $100
;		.error .concat( "Invalid immediate value for the ", \
;			.string(instr), " instruction" )
;	.endif
;.endmac
;
;.macro error_if_too_large_imm_value_16 imm_value_16, instr
;	.if imm_value_16 >= $10000
;		.error .concat( "Invalid immediate value for the ", \
;			.string(instr), " instruction" )
;	.endif
;.endmac





; Instruction Group 1 generation macros
; Encoding:  0ooo aaaa iiii iiii

.define encode_ig1_op( op ) lshift_masked_bits{op}, \
	{instr_g1_op_range_hi},{instr_g1_op_range_lo}
.define encode_ig1_rA( rA ) lshift_masked_bits{rA}, \
	{instr_g1_ra_index_range_hi},{instr_g1_ra_index_range_lo}
.define encode_ig1_imm_value_8( imm_value_8 ) \
	lshift_masked_bits{imm_value_8},\
	{instr_g1_imm_value_range_hi},{instr_g1_imm_value_range_lo}

.macro gen_grp_1_instr_rA ig1_op, rA, imm_value_8
	error_if_bad_reg_name rA, ig1_op
	;error_if_too_large_imm_value_8_8 imm_value_8, ig1_op
	.dbyt encode_ig1_op{ig1_op} | encode_ig1_rA{.ident(rA)} \
		| encode_ig1_imm_value_8{imm_value_8}
.endmac

.macro gen_grp_1_instr_rAp ig1_op, rAp, imm_value_8
	error_if_bad_reg_pair_name rAp, ig1_op
	;error_if_too_large_imm_value_8_8 imm_value_8, ig1_op
	.dbyt encode_ig1_op{ig1_op} | encode_ig1_rA{.ident(reg_pair_hi{rAp})} \
		| encode_ig1_imm_value_8{imm_value_8}
.endmac


; Instruction Group 2 generation macros
; Encoding:  10oo oooo aaaa bbbb
.define encode_ig2_id( ig2_id ) lshift_masked_bits{ig2_id}, \
	{instr_g2_id_range_hi},{instr_g2_id_range_lo}
.define encode_ig2_op( op ) lshift_masked_bits{op}, \
	{instr_g2_op_range_hi},{instr_g2_op_range_lo}
.define encode_ig2_rA( rA ) lshift_masked_bits{rA}, \
	{instr_g2_ra_index_range_hi},{instr_g2_ra_index_range_lo}
.define encode_ig2_rB( rB ) lshift_masked_bits{rB}, \
	{instr_g2_rb_index_range_hi},{instr_g2_rb_index_range_lo}

.macro gen_grp_2_instr_rA_rB ig2_op, rA, rB
	error_if_bad_reg_name rA, ig2_op
	error_if_bad_reg_name rB, ig2_op
	
	.dbyt encode_ig2_id{instr_g2_id} | encode_ig2_op{ig2_op} \
		| encode_ig2_rA{.ident(rA)} | encode_ig2_rB{.ident(rB)}
.endmac
.macro gen_grp_2_instr_rA ig2_op, rA
	error_if_bad_reg_name rA, ig2_op
	
	.dbyt encode_ig2_id{instr_g2_id} | encode_ig2_op{ig2_op} \
		| encode_ig2_rA{.ident(rA)}
.endmac
.macro gen_grp_2_instr_rAp ig2_op, rAp
	error_if_bad_reg_pair_name rAp, ig2_op
	
	.dbyt encode_ig2_id{instr_g2_id} | encode_ig2_op{ig2_op} \
		| encode_ig2_rA{.ident(reg_pair_hi{rAp})}
.endmac
.macro gen_grp_2_instr_rAp_rB ig2_op, rAp, rB
	error_if_bad_reg_pair_name rAp, ig2_op
	error_if_bad_reg_name rB, ig2_op
	
	.dbyt encode_ig2_id{instr_g2_id} | encode_ig2_op{ig2_op} \
		| encode_ig2_rA{.ident(reg_pair_hi{rAp})} \
		| encode_ig2_rB{.ident(rB)}
.endmac
.macro gen_grp_2_instr_rA_rBp ig2_op, rA, rBp
	error_if_bad_reg_name rA, ig2_op
	error_if_bad_reg_pair_name rBp, ig2_op
	
	.dbyt encode_ig2_id{instr_g2_id} | encode_ig2_op{ig2_op} \
		| encode_ig2_rA{.ident(rA)} \
		| encode_ig2_rB{.ident(reg_pair_hi{rBp})}
.endmac
.macro gen_grp_2_instr_rAp_rBp ig2_op, rAp, rBp
	error_if_bad_reg_pair_name rAp, ig2_op
	error_if_bad_reg_pair_name rBp, ig2_op
	
	.dbyt encode_ig2_id{instr_g2_id} | encode_ig2_op{ig2_op} \
		| encode_ig2_rA{.ident(reg_pair_hi{rAp})} \
		| encode_ig2_rB{.ident(reg_pair_hi{rBp})}
.endmac

.macro gen_grp_2_instr_rBp ig2_op, rBp
	error_if_bad_reg_pair_name rBp, ig2_op
	
	.dbyt encode_ig2_id{instr_g2_id} | encode_ig2_op{ig2_op} \
		| encode_ig2_rB{.ident(reg_pair_hi{rBp})}
.endmac
.macro gen_grp_2_instr_no_args ig2_op
	
	.dbyt encode_ig2_id{instr_g2_id} | encode_ig2_op{ig2_op}
.endmac


; Instruction Group 3 generation macros
; Encoding:  1100 ooaa aabb bccc
.define encode_ig3_id( ig3_id ) lshift_masked_bits{ig3_id}, \
	{instr_g3_id_range_hi},{instr_g3_id_range_lo}
.define encode_ig3_op( op ) lshift_masked_bits{op}, \
	{instr_g3_op_range_hi},{instr_g3_op_range_lo}
.define encode_ig3_rA( rA ) lshift_masked_bits{rA}, \
	{instr_g3_ra_index_range_hi},{instr_g3_ra_index_range_lo}
.define encode_ig3_rBp( rBp ) lshift_masked_bits{rBp}, \
	{instr_g3_rbp_index_range_hi},{instr_g3_rbp_index_range_lo}
.define encode_ig3_rCp( rCp ) lshift_masked_bits{rCp}, \
	{instr_g3_rcp_index_range_hi},{instr_g3_rcp_index_range_lo}

.macro gen_grp_3_instr ig3_op, rA, rBp, rCp
	error_if_bad_reg_name rA, ig3_op
	error_if_bad_reg_pair_name rBp, ig3_op
	error_if_bad_reg_pair_name rCp, ig3_op
	
	.dbyt encode_ig3_id{instr_g3_id} | encode_ig3_op{ig3_op} \
		| encode_ig3_rA{.ident(rA)} \
		| encode_ig3_rBp{encode_reg_pair{.ident(rBp)}} \
		| encode_ig3_rCp{encode_reg_pair{.ident(rCp)}}
.endmac


; Instruction Group 4 generation macros
; Encoding:  1101 oooo iiii iiii
.define encode_ig4_id( ig4_id ) lshift_masked_bits{ig4_id}, \
	{instr_g4_id_range_hi},{instr_g4_id_range_lo}
.define encode_ig4_op( op ) lshift_masked_bits{op}, \
	{instr_g4_op_range_hi},{instr_g4_op_range_lo}

.macro gen_grp_4_instr ig4_op, offset
	_branch_offset { .byte ( encode_ig4_id{instr_g4_id} \
		| encode_ig4_op{ig4_op} ) >> 8 }, offset
.endmac


; Instruction Group 5 generation macros
; Encoding:  1110 00oo oaaa abbb   iiii iiii jjjj jjjj
.define encode_ig5_ihi_id( ig5_id ) lshift_masked_bits{ig5_id}, \
	{instr_g5_ihi_id_range_hi},{instr_g5_ihi_id_range_lo}
.define encode_ig5_ihi_op( op ) lshift_masked_bits{op}, \
	{instr_g5_ihi_op_range_hi},{instr_g5_ihi_op_range_lo}
.define encode_ig5_ihi_rA( rA ) lshift_masked_bits{rA}, \
	{instr_g5_ihi_ra_index_range_hi},{instr_g5_ihi_ra_index_range_lo}
.define encode_ig5_ihi_rBp( rBp ) lshift_masked_bits{rBp}, \
	{instr_g5_ihi_rbp_index_range_hi},{instr_g5_ihi_rbp_index_range_lo}

.macro gen_grp_5_instr_rA_rBp ig5_op, rA, rBp, imm_value_16
	error_if_bad_reg_name rA
	error_if_bad_reg_pair_name rBp
	
	.dbyt encode_ig5_ihi_id{instr_g5_ihi_id} \
		| encode_ig5_ihi_op{ig5_op} | encode_ig5_ihi_rA{.ident(rA)} \
		| encode_ig5_ihi_rBp{encode_reg_pair{.ident(rBp)}}
	.dbyt .loword(imm_value_16)
.endmac

.macro gen_grp_5_instr_rAp ig5_op, rAp, imm_value_16
	error_if_bad_reg_pair_name rAp
	
	.dbyt encode_ig5_ihi_id{instr_g5_ihi_id} \
		| encode_ig5_ihi_op{ig5_op} \
		| encode_ig5_ihi_rA{.ident(reg_pair_hi{rAp})}
	.dbyt .loword(imm_value_16)
.endmac

.macro gen_grp_5_instr_imm_value_16_only ig5_op, imm_value_16
	
	.dbyt encode_ig5_ihi_id{instr_g5_ihi_id} | encode_ig5_ihi_op{ig5_op}
	.dbyt .loword(imm_value_16)
.endmac


; Group 1 Instructions
; Encoding:  0ooo aaaa iiii iiii
	; Arithmetic instructions:
.macro addi rA, imm_value_8
	gen_grp_1_instr_rA instr_grp_1_oper::instr_g1_op_addi, rA, imm_value_8
.endmac
.macro adci rA, imm_value_8
	gen_grp_1_instr_rA instr_grp_1_oper::instr_g1_op_adci, rA, imm_value_8
.endmac

; (ADd 8-bit Immediate value to reg Pair rAp)
.macro addpbi rAp, imm_value_8
	gen_grp_1_instr_rAp instr_grp_1_oper::instr_g1_op_addpbi, rAp, \
		imm_value_8
.endmac

; (SuBtract 8-bit Immediate value from reg Pair rAp [NOT an assembler alias
; for addpbi])
.macro subpbi rAp, imm_value_8
	gen_grp_1_instr_rAp instr_grp_1_oper::instr_g1_op_subpbi, rAp, \
		imm_value_8
.endmac

.macro cmpi rA, imm_value_8
	gen_grp_1_instr_rA instr_grp_1_oper::instr_g1_op_cmpi, rA, imm_value_8
.endmac


; Bitwise instructions with two operands:
.macro andi rA, imm_value_8
	gen_grp_1_instr_rA instr_grp_1_oper::instr_g1_op_andi, rA, imm_value_8
.endmac
.macro orri rA, imm_value_8
	gen_grp_1_instr_rA instr_grp_1_oper::instr_g1_op_orri, rA, imm_value_8
.endmac


	;Copy instructions:
	; (CoPY Immediate)
.macro cpyi rA, imm_value_8
	gen_grp_1_instr_rA instr_grp_1_oper::instr_g1_op_cpyi, rA, imm_value_8
.endmac





; Group 2 Instructions
; Encoding:  10oo oooo aaaa bbbb

;;	; Arithmetic instructions:
;;.macro add rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_add, rA, rB
;;.endmac
;;.macro adc rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_adc, rA, rB
;;.endmac
;;
;;
;;.macro addpb rAp, rB
;;	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_addpb, rAp, rB
;;.endmac
;;.macro addp rAp, rBp
;;	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_addp, rAp, rBp
;;.endmac
;;
;;
;;.macro sub rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_sub, rA, rB
;;.endmac
;;.macro sbc rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_sbc, rA, rB
;;.endmac
;;.macro subpb rAp, rB
;;	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_subpb, rAp, rB
;;.endmac
;;.macro subp rAp, rBp
;;	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_subp, rAp, rBp
;;.endmac
;;
;;.macro cmp rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_cmp, rA, rB
;;.endmac
;;.macro cmpp rAp, rBp
;;	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_cmpp, rAp, rBp
;;.endmac
;;	
;;
;;
;;	; Bitwise instructions with two register operands:
;;.macro and rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_and, rA, rB
;;.endmac
;;.macro orr rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_orr, rA, rB
;;.endmac
;;.macro xor rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_xor, rA, rB
;;.endmac
;;
;;
;;	; Complement instructions with one register operand (rB ignored):
;;	; (one's complement of rA)
;;.macro inv rA
;;	gen_grp_2_instr_rA instr_grp_2_oper::instr_g2_op_inv, rA
;;.endmac
;;	; (one's complement of rAp)
;;.macro invp rAp
;;	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_invp, rAp
;;.endmac
;;	; (two's complement of rA)
;;.macro neg rA
;;	gen_grp_2_instr_rA instr_grp_2_oper::instr_g2_op_neg, rA
;;.endmac
;;	; (two's complement of rAp)
;;.macro negp rAp
;;	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_negp, rAp
;;.endmac
;;
;;
;;	; Bitshifting (and rotating) instructions that use the value of rB
;;	; as the number of bits to shift by:
;;.macro lsl rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_lsl, rA, rB
;;.endmac
;;.macro lsr rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_lsr, rA, rB
;;.endmac
;;.macro asr rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_asr, rA, rB
;;.endmac
;;.macro rol rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_rol, rA, rB
;;.endmac
;;.macro ror rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_ror, rA, rB
;;.endmac
;;
;;	; Bit rotating instructions that use carry as bit 8 for a 9-bit
;;	; rotate of { carry, rA } by one bit:
;;.macro rolc rA
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_rolc, rA, r0
;;.endmac
;;.macro rorc rA
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_rorc, rA, r0
;;.endmac
;;
;;
;;	; Bitshifting (and rotating) instructions that do a 16-bit shift
;;	; or rotate on the reg pair rAp, using rB as the number of bits to
;;	; shift by:
;;.macro lslp rAp, rB
;;	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_lslp, rAp, rB
;;.endmac
;;.macro lsrp rAp, rB
;;	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_lsrp, rAp, rB
;;.endmac
;;.macro asrp rAp, rB
;;	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_asrp, rAp, rB
;;.endmac
;;.macro rolp rAp, rB
;;	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_rolp, rAp, rB
;;.endmac
;;.macro rorp rAp, rB
;;	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_rorp, rAp, rB
;;.endmac
;;
;;
;;	; Bit rotating instructions that use carry as bit 16 for a 17-bit
;;	; rotate of { carry, rAp } by one bit:
;;.macro rolcp rAp
;;	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_rolcp, rAp
;;.endmac
;;.macro rorcp rAp
;;	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_rorcp, rAp
;;.endmac
;;
;;
;;	; Copy instructions:
;;	; (CoPY from reg rB to reg rA)
;;.macro cpy rA, rB
;;	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_cpy, rA, rB
;;.endmac
;;	; (CoPY from reg Pair rBp to reg Pair rAp)
;;.macro cpyp rAp, rBp
;;	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_cpyp, rAp, rBp
;;.endmac
;;	; (Clear reg rA, then CoPY FRom Flags to reg rA)
;;.macro cpyfrf rA
;;	gen_grp_2_instr_rA instr_grp_2_oper::instr_g2_op_cpyfrf, rA
;;.endmac
;;	; (CoPY TO Flags from reg rA)
;;.macro cpytof rA
;;	gen_grp_2_instr_rA instr_grp_2_oper::instr_g2_op_cpytof, rA
;;.endmac
;;
;;
;;	; Swap instructions:
;;	; (SWap register Pair, also can be used as a combined "call",
;;	; "jump", and "return" instruction by swapping some other register
;;	; pair with the "pc" [r14p] register pair)
;;.macro swp rAp, rBp
;;	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_swp, rAp, rBp
;;.endmac
;;
;;
;;	; Call instruction (Description:  sets the link register to the
;;	; return address, then sets the program counter to the address
;;	; contained in the reg pair rAp):
;;	; (CALL subroutine at address in reg pair rAp)
;;.macro call rAp
;;	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_call, rAp
;;.endmac
;;
;;
;;	; 8-bit Load/store instructions:
;;	; (LoaD contents into Register rA from memory at address in rBp)
;;.macro ldr rA, rBp
;;	gen_grp_2_instr_rA_rBp instr_grp_2_oper::instr_g2_op_ldr, rA, rBp
;;.endmac
;;	; (STore Register rA contents to memory at address in rBp)
;;.macro str rA, rBp
;;	gen_grp_2_instr_rA_rBp instr_grp_2_oper::instr_g2_op_str, rA, rBp
;;.endmac
;;
;;	; 8-bit Push/pop style instructions:
;;	
;;	; (Add 1 the reg pair rBp, then LoaD contents into Register rA from
;;	; memory at address contained in reg pair rBp)
;;.macro ldrab rA, rBp
;;	gen_grp_2_instr_rA_rBp instr_grp_2_oper::instr_g2_op_ldrab, rA, rBp
;;.endmac
;;	
;;	; (STore reg rA to memory at address contained in reg pair rBp, then
;;	; Subtract 1 from the reg pair rBp)
;;.macro strsa rA, rBp
;;	gen_grp_2_instr_rA_rBp instr_grp_2_oper::instr_g2_op_strsa, rA, rBp
;;.endmac
;;	
;;	; (Add 1 to the reg pair rBp, then LoaD a byte containing processor
;;	; Flags (other bits cleared) into the processor flags)
;;.macro ldfab rBp
;;	gen_grp_2_instr_rBp instr_grp_2_oper::instr_g2_op_ldfab, rBp
;;.endmac
;;	
;;	; (STore a byte containing the current processor flags (other bits
;;	; cleared) to memory at address contained in reg pair rBp, then Add 1
;;	; the reg pair rBp)
;;.macro stfsa rBp
;;	gen_grp_2_instr_rBp instr_grp_2_oper::instr_g2_op_stfsa, rBp
;;.endmac
;;	
;;	
;;	; Interrupt instructions (these ignore BOTH rA and rB):
;;	; (ENable Interrupts)
;;.macro eni
;;	gen_grp_2_instr_no_args instr_grp_2_oper::instr_g2_op_eni
;;.endmac
;;	; (DIsable Interrupts)
;;.macro dii
;;	gen_grp_2_instr_no_args instr_grp_2_oper::instr_g2_op_dii
;;.endmac
;;	; (Set the PC to interrupt RETurn address and enable Interrupts)
;;.macro reti 
;;	gen_grp_2_instr_no_args instr_grp_2_oper::instr_g2_op_reti
;;.endmac
;;
;;	; Extra Interrupt Instructions
;;	; (Swap the Interrupt Return Address and rAp)
;;.macro swpira rAp
;;	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_swpira, rAp
;;.endmac
;;
;;	; (CoPY the Interrupt Return Address to rAp)
;;.macro cpypira rAp
;;	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_cpypira, rAp
;;.endmac



	; -- rA, rB --

	; Arithmetic instructions:
.macro add rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_add, rA, rB
.endmac
.macro adc rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_adc, rA, rB
.endmac
.macro sub rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_sub, rA, rB
.endmac
.macro sbc rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_sbc, rA, rB
.endmac
.macro cmp rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_cmp, rA, rB
.endmac

	; Bitwise instructions with two register operands:
.macro and rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_and, rA, rB
.endmac
.macro orr rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_orr, rA, rB
.endmac
.macro xor rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_xor, rA, rB
.endmac

	; Bitshifting (and rotating) instructions that use the value of rB
	; as the number of bits to shift by:
.macro lsl rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_lsl, rA, rB
.endmac
.macro lsr rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_lsr, rA, rB
.endmac
.macro asr rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_asr, rA, rB
.endmac
.macro rol rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_rol, rA, rB
.endmac
.macro ror rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_ror, rA, rB
.endmac

	; Bit rotating instructions that use carry as bit 8 for a 9-bit
	; rotate of { carry, rA } by one bit:
.macro rolc rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_rolc, rA, rB
.endmac
.macro rorc rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_rorc, rA, rB
.endmac

	; Copy instructions:
	; (CoPY from reg rB to reg rA)
.macro cpy rA, rB
	gen_grp_2_instr_rA_rB instr_grp_2_oper::instr_g2_op_cpy, rA, rB
.endmac





	; -- rA --

	; Complement instructions with one register operand (rB ignored):
	; (one's complement of rA)
.macro inv rA
	gen_grp_2_instr_rA instr_grp_2_oper::instr_g2_op_inv, rA
.endmac
	; (two's complement of rA)
.macro neg rA
	gen_grp_2_instr_rA instr_grp_2_oper::instr_g2_op_neg, rA
.endmac
	; (Clear reg rA, then CoPY FRom Flags to reg rA)
.macro cpyfrf rA
	gen_grp_2_instr_rA instr_grp_2_oper::instr_g2_op_cpyfrf, rA
.endmac
	; (CoPY TO Flags from reg rA)
.macro cpytof rA
	gen_grp_2_instr_rA instr_grp_2_oper::instr_g2_op_cpytof, rA
.endmac




	; -- rAp --

	; Complement instructions with one register operand (rB ignored):
	; (one's complement of rAp)
.macro invp rAp
	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_invp, rAp
.endmac

	; (two's complement of rA)
.macro negp rAp
	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_negp, rAp
.endmac

	; Bit rotating instructions that use carry as bit 16 for a 17-bit
	; rotate of { carry, rAp } by one bit:
.macro rolcp rAp
	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_rolcp, rAp
.endmac
.macro rorcp rAp
	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_rorcp, rAp
.endmac

	; Call instruction (Description:  sets the link register to the
	; return address, then sets the program counter to the address
	; contained in the reg pair rAp):
	; (CALL subroutine at address in reg pair rAp)
.macro call rAp
	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_call, rAp
.endmac

	; Extra Interrupt Instructions
	; (Swap the Interrupt Return Address and rAp)
.macro swpira rAp
	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_swpira, rAp
.endmac
	; (CoPY the Interrupt Return Address to rAp)
.macro cpypira rAp
	gen_grp_2_instr_rAp instr_grp_2_oper::instr_g2_op_cpypira, rAp
.endmac





	; -- rAp, rB --

	; Arithmetic instructions:
.macro addpb rAp, rB
	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_addpb, rAp, rB
.endmac
.macro subpb rAp, rB
	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_subpb, rAp, rB
.endmac

	; Bitshifting (and rotating) instructions that do a 16-bit shift
	; or rotate on the reg pair rAp, using rB as the number of bits to
	; shift by:
.macro lslp rAp, rB
	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_lslp, rAp, rB
.endmac
.macro lsrp rAp, rB
	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_lsrp, rAp, rB
.endmac
.macro asrp rAp, rB
	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_asrp, rAp, rB
.endmac
.macro rolp rAp, rB
	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_rolp, rAp, rB
.endmac
.macro rorp rAp, rB
	gen_grp_2_instr_rAp_rB instr_grp_2_oper::instr_g2_op_rorp, rAp, rB
.endmac




	; -- rA, rBp --

	; 8-bit Load/store instructions:
	; (LoaD contents into Register rA from memory at address in rBp)
.macro ldr rA, rBp
	gen_grp_2_instr_rA_rBp instr_grp_2_oper::instr_g2_op_ldr, rA, rBp
.endmac
	; (STore Register rA contents to memory at address in rBp)
.macro str rA, rBp
	gen_grp_2_instr_rA_rBp instr_grp_2_oper::instr_g2_op_str, rA, rBp
.endmac

	; 8-bit Push/pop style instructions:

	; (Add 1 the reg pair rBp, then LoaD contents into Register rA from
	; memory at address contained in reg pair rBp)
.macro ldrab rA, rBp
	gen_grp_2_instr_rA_rBp instr_grp_2_oper::instr_g2_op_ldrab, rA, rBp
.endmac
	; (STore reg rA to memory at address contained in reg pair rBp, then
	; Subtract 1 from the reg pair rBp)
.macro strsa rA, rBp
	gen_grp_2_instr_rA_rBp instr_grp_2_oper::instr_g2_op_strsa, rA, rBp
.endmac




	; -- rAp, rBp --

	; Arithmetic instructions:
.macro addp rAp, rBp
	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_addp, rAp, rBp
.endmac
.macro subp rAp, rBp
	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_subp, rAp, rBp
.endmac
.macro cmpp rAp, rBp
	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_cmpp, rAp, rBp
.endmac

	; (CoPY from reg Pair rBp to reg Pair rAp)
.macro cpyp rAp, rBp
	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_cpyp, rAp, rBp
.endmac
	; Swap instructions:
	; (SWap register Pair, also can be used as a combined "call",
	; "jump", and "return" instruction by swapping some other register
	; pair with the "pc" [r14p] register pair)
.macro swp rAp, rBp
	gen_grp_2_instr_rAp_rBp instr_grp_2_oper::instr_g2_op_swp, rAp, rBp
.endmac




	; -- rBp --

	; (Add 1 to the reg pair rBp, then LoaD a byte containing processor
	; Flags (other bits cleared) into the processor flags)
.macro ldfab rBp
	gen_grp_2_instr_rBp instr_grp_2_oper::instr_g2_op_ldfab, rBp
.endmac
	; (STore a byte containing the current processor flags (other bits
	; cleared) to memory at address contained in reg pair rBp, then Add 1
	; the reg pair rBp)
.macro stfsa rBp
	gen_grp_2_instr_rBp instr_grp_2_oper::instr_g2_op_stfsa, rBp
.endmac




	; -- no args --
	; Interrupt instructions (these ignore BOTH rA and rB):
	; (ENable Interrupts)
.macro eni
	gen_grp_2_instr_no_args instr_grp_2_oper::instr_g2_op_eni
.endmac
	; (DIsable Interrupts)
.macro dii
	gen_grp_2_instr_no_args instr_grp_2_oper::instr_g2_op_dii
.endmac
	; (Set the PC to interrupt RETurn address and enable Interrupts)
.macro reti
	gen_grp_2_instr_no_args instr_grp_2_oper::instr_g2_op_reti
.endmac




; Group 3 Instructions
; Encoding:  1100 ooaa aabb bccc
	; Indexed Load/store instructions:
	; Load 8-bit value from memory at address [rBp + rCp] into rA
.macro ldrx rA, rBp, rCp
	gen_grp_3_instr instr_grp_3_oper::instr_g3_op_ldrx, rA, rBp, rCp
.endmac
	; Store rA to memory at address [rBp + rCp]
.macro strx rA, rBp, rCp
	gen_grp_3_instr instr_grp_3_oper::instr_g3_op_strx, rA, rBp, rCp
.endmac




; Group 4 Instructions
; Encoding:  1101 oooo iiii iiii
	; Branching instructions (note that iiii iiii is a SIGNED 8-bit
	; integer):

	; (branch always)
.macro bra offset
	gen_grp_4_instr instr_grp_4_oper::instr_g4_op_bra, offset
.endmac
	; (branch never, a form of NOP)
.macro bnv offset
	gen_grp_4_instr instr_grp_4_oper::instr_g4_op_bnv, offset
.endmac
	; (branch when Z == 0)
.macro bne offset
	gen_grp_4_instr instr_grp_4_oper::instr_g4_op_bne, offset
.endmac
	; (branch when Z == 1)
.macro beq offset
	gen_grp_4_instr instr_grp_4_oper::instr_g4_op_beq, offset
.endmac
	; (branch when C == 0 [unsigned greater than or equal])
.macro bcc offset
	gen_grp_4_instr instr_grp_4_oper::instr_g4_op_bcc, offset
.endmac
	; (branch when C == 1 [unsigned less than])
.macro bcs offset
	gen_grp_4_instr instr_grp_4_oper::instr_g4_op_bcs, offset
.endmac
	; (branch when ( ( C == 1 and Z == 0 ) or ( Z == 1 ) )
	; [unsigned less than or equal])
.macro bls offset
	gen_grp_4_instr instr_grp_4_oper::instr_g4_op_bls, offset
.endmac
	; (branch when C == 0 and Z == 0 [unsigned greater than])
.macro bhi offset
	gen_grp_4_instr instr_grp_4_oper::instr_g4_op_bhi, offset
.endmac




; Group 5 Instructions
; Encoding:  1110 00oo oaaa abbb   iiii iiii jjjj jjjj

	; Extended copy instructions:
	; (COPY Pair Immediate, which sets the a register pair rAp to a
	; 16-bit value in one instruction, but in twice the number of
	; cycles due to using more than two bytes [can be used a as a jump
	; immediate by copying a 16-bit immediate value to the pc] [this
	; instruction ONLY has an advantage over using two successive cpyi
	; instructions when used to copy a 16-bit immediate value to the
	; pc])
.macro cpypi rAp, imm_value_16
	;error_if_bad_reg_pair_name rAp
	gen_grp_5_instr_rAp instr_grp_5_oper::instr_g5_op_cpypi, rAp, \
		imm_value_16
.endmac
	

	; Call instructions
	; (CALL Immediate, which sets the link register to the return
	; address, then sets the program counter to the destination
	; address)
.macro calli imm_value_16
	gen_grp_5_instr_imm_value_16_only \
		instr_grp_5_oper::instr_g5_op_calli, imm_value_16 
.endmac

	; Indexed Load/store instructions:
	; (Load 8-bit value from memory at address [rBp + 16-bit Immediate
	; value] into rA)
.macro ldrxi rA, rBp, imm_value_16
	;error_if_bad_reg_name rA
	;error_if_bad_reg_pair_name rBp
	gen_grp_5_instr_rA_rBp instr_grp_5_oper::instr_g5_op_ldrxi, rA, rBp, \
		imm_value_16
.endmac

	; (Store rA to memory at address [rBp + 16-bit Immediate value])
.macro strxi rA, rBp, imm_value_16
	;error_if_bad_reg_name rA
	;error_if_bad_reg_pair_name rBp
	
	gen_grp_5_instr_rA_rBp instr_grp_5_oper::instr_g5_op_strxi, rA, rBp, \
		imm_value_16
.endmac




	; Pseudo instructions
.macro addpi rAp, imm_value_16
	error_if_bad_reg_pair_name rAp, addpi
	warn_if_reg_pair_is_sp rAp, addpi
	addi reg_pair_lo{rAp}, <(imm_value_16)
	adci reg_pair_hi{rAp}, >(imm_value_16)
.endmac

.macro adcpi rAp, imm_value_16
	error_if_bad_reg_pair_name rAp, adcpi
	warn_if_reg_pair_is_sp rAp, adcpi
	adci reg_pair_lo{rAp}, <(imm_value_16)
	adci reg_pair_hi{rAp}, >(imm_value_16)
.endmac



.macro subi rA, imm_value_8
	error_if_bad_reg_name rA, subi
	addi rA, -imm_value_8
.endmac

; There is no sbci
.macro subpi rAp, imm_value_16
	error_if_bad_reg_pair_name rAp, subpi
	warn_if_reg_pair_is_sp rAp, subpi
	addi reg_pair_lo{rAp}, <(-(imm_value_16))
	adci reg_pair_hi{rAp}, >(-(imm_value_16))
.endmac


;.macro addp rAp, rBp
;	error_if_bad_reg_pair_name rAp, add16
;	error_if_bad_reg_pair_name rBp, add16
;	add reg_pair_lo{rAp}, reg_pair_lo{rBp}
;	adc reg_pair_hi{rAp}, reg_pair_hi{rBp}
;.endmac
;.macro subp rAp, rBp
;	error_if_bad_reg_pair_name rAp, sub16
;	error_if_bad_reg_pair_name rBp, sub16
;	sub reg_pair_lo{rAp}, reg_pair_lo{rBp}
;	sbc reg_pair_hi{rAp}, reg_pair_hi{rBp}
;.endmac




; This is the only reason I know of to use bnv
.macro nop
	.local @next
@next:
	bnv @next
.endmac


	; (branch when Z == 0 )
.macro bzc offset
	bne offset
.endmac
	; (branch when Z == 1 )
.macro bzs offset
	beq offset
.endmac

	; (branch when C == 0 [unsigned greater than or equal])
.macro bhs offset
	bcc offset
.endmac
	; (branch when C == 1 [unsigned less than])
.macro blo offset
	bcs offset
.endmac


;; Jump/call pseudo instructions
;.macro basic_jump rAp
;	cpyp pc, rAp
;.endmac
;.macro basic_jumpi imm_value_16
;	cpypi pc, imm_value_16
;.endmac
;;
;.macro rpair_chng_jump rAp
;	;subpbi rAp, num_bytes_instr_16
;	;subpbi rAp, num_bytes_instr_32
;	addpbi rAp, num_bytes_instr_16
;	cpyp pc, rAp
;.endmac

.macro jump rAp
	cpyp pc, rAp
.endmac
.macro jumpi label
	;cpypi pc, ( label - num_bytes_instr_32 )
	;cpypi pc, ( label - num_bytes_instr_16 )
	cpypi pc, label
	;cpypi pc, ( label + num_bytes_instr_16 )
.endmac


.macro backup_restore_lr_call rAp
	push_pair lr
	call rAp
	pop_pair lr
.endmac

.macro backup_restore_lr_calli label
	push_pair lr
	calli label
	pop_pair lr
.endmac



;.macro pop_and_ret rAp
;	pop_pair rAp
;	basic_jump rAp
;.endmac


.include "multi_ldr_str_macros.spinc"
.include "multi_ldp_stp_macros.spinc"




.macro push_reg rA
	;str rA, sp
	;subpbi sp, num_bytes_1_reg
	strsa rA, sp
.endmac
.macro pop_reg rA
	;addpbi sp, num_bytes_1_reg
	;ldr rA, sp
	ldrab rA, sp
.endmac

.macro push_flags
	stfsa sp
.endmac
.macro pop_flags
	ldfab sp
.endmac


;.macro multi_push_regs __multi_ldst_all_regs
;.if ( .blank(some_reg_0) )
;	; Required parameter is blank
;	.exitmacro
;.else
;	subpbi sp, ( .paramcount * num_bytes_1_reg )
;	multi_strxi sp, 1, __multi_ldst_all_regs
;.endif
;.endmac
;
;.macro multi_pop_regs __multi_ldst_all_regs
;.if ( .blank(some_reg_0) )
;	; Required parameter is blank
;	.exitmacro
;.else
;	multi_ldrxi sp, 1, __multi_ldst_all_regs
;	addpbi sp, ( .paramcount * num_bytes_1_reg )
;.endif
;.endmac
;
;
;
;
;;.macro push_pair rAp
;;	stp rAp, sp
;;	subpbi sp, num_bytes_1_pair
;;.endmac
;;
;;.macro pop_pair rAp
;;	;ldp rAp, sp
;;	ldpxi rAp, sp, 1
;;	addpbi sp, num_bytes_1_pair
;;.endmac
.macro push_pair rAp
	;multi_push_regs convert_pair_to_two_regs{rAp}
	push_reg reg_pair_lo{rAp}
	push_reg reg_pair_hi{rAp}
.endmac

.macro pop_pair rAp
	;multi_pop_regs convert_pair_to_two_regs{rAp}
	pop_reg reg_pair_hi{rAp}
	pop_reg reg_pair_lo{rAp}
.endmac


;.macro multi_push_pairs __multi_ldst_all_pairs
;.if ( .blank(some_pair_0) )
;	; Required parameter is blank
;	.exitmacro
;.else
;	subpbi sp, ( .paramcount * num_bytes_1_pair )
;	multi_stpxi sp, 1, __multi_ldst_all_pairs
;.endif
;.endmac
;
;.macro multi_pop_pairs __multi_ldst_all_pairs
;.if ( .blank(some_pair_0) )
;	; Required parameter is blank
;	.exitmacro
;.else
;	multi_ldpxi sp, 1, __multi_ldst_all_pairs
;	addpbi sp, ( .paramcount * num_bytes_1_pair )
;.endif
;.endmac




.endif		; spcpu_ca65_macro_pack_spinc
