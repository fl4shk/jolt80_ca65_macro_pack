.ifndef cpu_constants_spinc
cpu_constants_spinc = 3

.include "general_macros.spinc"

proc_flags_width = 2
proc_flags_msb_pos = width_to_msb_pos(proc_flags_width)


; General register constants

; 16 GPRs
cpu_num_regs = 16

; 8 GPR pairs
cpu_num_reg_pairs = 8


; Instruction encoding things
cpu_reg_index_ie_width = 4
cpu_reg_index_ie_msb_pos = width_to_msb_pos(cpu_reg_index_ie_width)

cpu_rp_index_ie_width = 3
cpu_rp_index_ie_msb_pos = width_to_msb_pos(cpu_rp_index_ie_width)


; Register widths and most significant bit positions
cpu_reg_width = 8
cpu_reg_msb_pos = width_to_msb_pos(cpu_reg_width)

cpu_rp_width = 16
cpu_rp_msb_pos = width_to_msb_pos(cpu_rp_width)

; Immediate value widths and most significant bit positions
cpu_imm_value_8_width = cpu_reg_width
cpu_imm_value_8_msb_pos = cpu_reg_msb_pos

cpu_imm_value_16_width = cpu_rp_width
cpu_imm_value_16_msb_pos = cpu_rp_msb_pos


; CPU Register array size stuff
cpu_reg_arr_width = 16
cpu_reg_arr_msb_pos = width_to_msb_pos(cpu_reg_arr_width)


; Non-instruction data in/out size stuff (8-bit because during instruction
; execution, the CPU can only load or store one byte at a time)
cpu_data_inout_8_width = cpu_reg_width
cpu_data_inout_8_msb_pos = cpu_reg_msb_pos

; Instruction data size stuff (16-bit
cpu_data_inout_16_width = cpu_rp_width
cpu_data_inout_16_msb_pos = cpu_rp_msb_pos



; Addressing stuff
cpu_addr_width = cpu_rp_width
cpu_addr_msb_pos = cpu_rp_msb_pos
 
; CPU state stuff
cpu_state_width = 4
cpu_state_msb_pos = width_to_msb_pos(cpu_state_width)


r0_num = 0
r1_num = 1
r2_num = 2
r3_num = 3
r4_num = 4
r5_num = 5
r6_num = 6
r7_num = 7
r8_num = 8
r9_num = 9
r10_num = 10
r11_num = 11
r12_num = 12
r13_num = 13
r14_num = 14
r15_num = 15


; REQUIRE the use of the "p" character, or use the "lr" or "pc" special
; registers
r0p_num = r15_num + 2
r2p_num = r15_num + 4
r4p_num = r15_num + 6
r6p_num = r15_num + 8
r8p_num = r15_num + 10
r10p_num = r15_num + 12
r12p_num = r15_num + 14
r14p_num = r15_num + 16
lr_num = r12p_num
pc_num = r14p_num


.define r0 "r0_num"
.define r1 "r1_num"
.define r2 "r2_num"
.define r3 "r3_num"
.define r4 "r4_num"
.define r5 "r5_num"
.define r6 "r6_num"
.define r7 "r7_num"
.define r8 "r8_num"
.define r9 "r9_num"
.define r10 "r10_num"
.define r11 "r11_num"
.define r12 "r12_num"
.define r13 "r13_num"
.define r14 "r14_num"
.define r15 "r15_num"

.define r0p "r0p_num"
.define r2p "r2p_num"
.define r4p "r4p_num"
.define r6p "r6p_num"
.define r8p "r8p_num"
.define r10p "r10p_num"
.define r12p "r12p_num"
.define r14p "r14p_num"
.define sp "r10p_num"
.define lr "r12p_num"
.define pc "r14p_num"

; Get the ACTUAL encoding of a reg pair
.define encode_reg_pair_to_high( rAp ) ( (rAp) - r15_num - 2 )
.define encode_reg_pair( rAp ) ( (encode_reg_pair_to_high{rAp}) >> 1 )

.define reg_pair_hi( rAp ) .concat( "r", \
	.string(encode_reg_pair_to_high{.ident(rAp)}), "_num" )
.define reg_pair_lo( rAp ) .concat( "r", \
	.string( encode_reg_pair_to_high{.ident(rAp)} + 1 ), "_num" )


; Number of bytes for specific numbers of regs
num_bytes_1_reg = 1
num_bytes_2_reg = num_bytes_1_reg + num_bytes_1_reg
num_bytes_3_reg = num_bytes_2_reg + num_bytes_1_reg
num_bytes_4_reg = num_bytes_3_reg + num_bytes_1_reg
num_bytes_5_reg = num_bytes_4_reg + num_bytes_1_reg
num_bytes_6_reg = num_bytes_5_reg + num_bytes_1_reg
num_bytes_7_reg = num_bytes_6_reg + num_bytes_1_reg
num_bytes_8_reg = num_bytes_7_reg + num_bytes_1_reg
num_bytes_9_reg = num_bytes_8_reg + num_bytes_1_reg
num_bytes_10_reg = num_bytes_9_reg + num_bytes_1_reg
num_bytes_11_reg = num_bytes_10_reg + num_bytes_1_reg
num_bytes_12_reg = num_bytes_11_reg + num_bytes_1_reg
num_bytes_13_reg = num_bytes_12_reg + num_bytes_1_reg
num_bytes_14_reg = num_bytes_13_reg + num_bytes_1_reg
num_bytes_15_reg = num_bytes_14_reg + num_bytes_1_reg

; Number of bytes for specific numbers of reg pairs
num_bytes_1_pair = 2
num_bytes_2_pair = num_bytes_1_pair + num_bytes_1_pair
num_bytes_3_pair = num_bytes_2_pair + num_bytes_1_pair
num_bytes_4_pair = num_bytes_3_pair + num_bytes_1_pair
num_bytes_5_pair = num_bytes_4_pair + num_bytes_1_pair
num_bytes_6_pair = num_bytes_5_pair + num_bytes_1_pair
num_bytes_7_pair = num_bytes_6_pair + num_bytes_1_pair

num_bytes_instr_16 = 2
num_bytes_instr_32 = 4


initial_sp = $8000


.endif		; cpu_constants_spinc
